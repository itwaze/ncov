{"version":3,"sources":["components/notes/virus.svg","components/spinner/index.js","components/spinner/spinner.js","components/notes/index.js","components/notes/notes.js","components/current/index.js","components/current/current.js","components/header/index.js","components/header/header.js","components/table/index.js","components/table/table.js","components/app/index.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","className","Notes","useState","notes","setNotes","useEffect","fetchNotes","a","axios","get","res","$","cheerio","load","data","parent","find","forEach","el","children","next","displayNotes","length","map","i","text","key","src","virus","CurrentDay","current","setCurrent","fetchCurrentDay","currentDay","currentDayNews","date","news","source","link","attribs","href","target","Header","Table","tableData","setTableData","tableRef","useRef","console","log","fetchTableData","filter","type","country","totalCases","newCases","totalDeaths","newDeaths","totalRecovered","activeCases","criticalCases","pop","ref","title","columns","field","headerStyle","fontWeight","options","pageSize","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a80b08a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.b1b468f6.svg\";","import Spinner from './spinner';\nexport default Spinner;","import React from \"react\";\nimport \"./spinner.css\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"loader\">\n      <div className=\"dot dot1\">\n        <i></i>\n      </div>\n      <div className=\"dot dot2\">\n        <i></i>\n      </div>\n      <div className=\"dot dot3\">\n        <i></i>\n      </div>\n      <div className=\"dot dot4\">\n        <i></i>\n      </div>\n      <div className=\"dot dot5\">\n        <i></i>\n      </div>\n      <div className=\"dot dot6\">\n        <i></i>\n      </div>\n      <div className=\"dot dot7\">\n        <i></i>\n      </div>\n      <div className=\"dot dot8\">\n        <i></i>\n      </div>\n      <div className=\"dot dot9\">\n        <i></i>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;","import Notes from './notes';\nexport default Notes;","import React, { useEffect, useState } from \"react\";\nimport cheerio from \"cheerio\";\nimport axios from \"axios\";\nimport virus from \"./virus.svg\";\nimport Spinner from \"../spinner\";\n\nimport \"./notes.css\";\n\nconst Notes = () => {\n  const url =\n    \"https://cors-anywhere.herokuapp.com/https://cors-anywhere.herokuapp.com/https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases\";\n\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() => {\n    fetchNotes();\n  }, []);\n\n  const fetchNotes = async () => {\n    let res = await axios.get(url)\n\n    const $ = cheerio.load(res.data);\n\n    const parent = $(\"div#mvp-content-main\");\n    const h2Tags = parent.find(\"h2\");\n\n    h2Tags.get().forEach(el => {\n      if (el.children[0].data === \"Notes\") setNotes(el.next.next.children);\n    });\n  };\n\n  const displayNotes = notes.length ? (\n    <>\n      <h2>Notes</h2>\n      <ul>\n        {notes.map((el, i) => {\n          const text = el.children[0].data;\n\n          return (\n            <li key={i}>\n              <img src={virus} />\n              <span>{text}</span>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  ) : (\n    <Spinner />\n  );\n  return <section className=\"notes\">{displayNotes}</section>;\n};\n\nexport default Notes;\n","import CurrentDay from './current';\nexport default CurrentDay;","import React, { useEffect, useState } from \"react\";\nimport cheerio from \"cheerio\";\nimport axios from \"axios\";\nimport Spinner from \"../spinner\";\nimport \"./current.css\";\n\nconst CurrentDay = () => {\n  const url =\n    \"https://cors-anywhere.herokuapp.com/https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases\";\n\n  const [current, setCurrent] = useState({});\n\n  useEffect(() => {\n    fetchCurrentDay();\n  }, []);\n\n  const fetchCurrentDay = async () => {\n    let res = await axios.get(url);\n\n    const $ = cheerio.load(res.data);\n    const parent = $(\"div#mvp-content-main\");\n    const h2Tags = parent.find(\"h2\");\n\n    h2Tags.get().forEach(el => {\n      if (el.children[0].data === \"Timeline (GMT)\") {\n        const currentDay = el.next.next.children[0].data;\n        const currentDayNews = el.next.next.next.next.children;\n        setCurrent({ date: currentDay, news: currentDayNews });\n      }\n    });\n  };\n\n  return (\n    <section className=\"current\">\n      {current.news ? (\n        <>\n          <h2>{current.date}</h2>\n          <ul>\n            {current.news.map((el, i) => {\n              const text = el.children[0].data;\n              const source = el.children[1];\n\n              const link = source ? source.attribs.href : \"#\";\n              const target = source ? source.attribs.target : \"\";\n\n              return (\n                <li key={i}>\n                  {text}\n                  <a href={link} target={target}>\n                    Source\n                  </a>\n                  )\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      ) : (\n        <Spinner />\n      )}\n    </section>\n  );\n};\n\nexport default CurrentDay;\n","import Header from './header';\nexport default Header;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./header.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>TIMELINE: Coronavirus epidemic</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import Table from './table';\nexport default Table;","import React, { useEffect, useState, useRef } from \"react\";\nimport cheerio from \"cheerio\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport Spinner from \"../spinner\";\n\nimport \"./table.css\";\n\nconst Table = () => {\n  const url = \"https://cors-anywhere.herokuapp.com/https://www.worldometers.info/coronavirus/#countries\";\n\n  const [tableData, setTableData] = useState([]);\n\n  const tableRef = useRef();\n    console.log(tableRef)\n  useEffect(() => {\n    fetchTableData();\n  }, []);\n\n  const fetchTableData = async () => {\n    let res = await axios.get(url);\n\n    const $ = cheerio.load(res.data);\n    const data = $(\"#main_table_countries tbody\")\n      .children()\n      .get()\n      .map(el =>\n        el.children\n          .filter(el => el.type === \"tag\")\n          .filter(el => el.children.filter(el => el.type === \"tag\"))\n      )\n      .map(el => {\n        return {\n          country: el[0].children[1]\n            ? el[0].children[1].children[0].data\n            : el[0].children[0].data,\n          totalCases: el[1].children[0].data,\n          newCases: el[2].children[0].data,\n          totalDeaths: el[3].children[0].data,\n          newDeaths: el[4].children[0].data,\n          totalRecovered: el[5].children[0].data,\n          activeCases: el[6].children[0].data,\n          criticalCases: el[7].children[0].data\n        };\n      });\n\n    data.pop();\n\n    setTableData(data);\n  };\n\n  return (\n    <section className=\"table\">\n      {tableData.length ? (\n        <MaterialTable\n          ref={tableRef}\n          title=\"Confirmed Cases and Deaths by Country\"\n          columns={[\n            {\n              title: \"Country\",\n              field: \"country\",\n              headerStyle: { fontWeight: \"bold\" }\n            },\n            {\n              title: \"Total Cases\",\n              field: \"totalCases\",\n              headerStyle: { fontWeight: \"bold\" }\n            },\n            {\n              title: \"Critical Cases\",\n              field: \"criticalCases\",\n              headerStyle: { fontWeight: \"bold\" }\n            },\n            {\n              title: \"Total Deaths\",\n              field: \"totalDeaths\",\n              headerStyle: { fontWeight: \"bold\" }\n            },\n            {\n              title: \"Total Recovered\",\n              field: \"totalRecovered\",\n              headerStyle: { fontWeight: \"bold\" }\n            }\n          ]}\n          data={tableData}\n          options={{\n            pageSize: 10\n          }}\n        />\n      ) : (\n        <Spinner />\n      )}\n    </section>\n  );\n};\n\nexport default Table;\n","import App from './App'\nexport default App","import React from \"react\";\nimport Notes from \"../notes\";\nimport CurrentDay from \"../current\";\nimport Header from \"../header\";\nimport Table from \"../table\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Notes />\n      <CurrentDay />\n      <Table />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}